/*!
 * andrej-goricar
 * Website design for andrejgoricar.com
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goriƒçar
 * Copyright 2019-2020. Copyrighted licensed.
 */
!function(e,t,i,o){"use strict";e(function(){const t={nav:!0,navText:["ü°Ñ","ü°Ü"],navElement:"div",mouseDrag:!1,pullDrag:!1},o=i.querySelector("body"),a=Array.from(o.classList);if(a.includes("events")){e("body.events .owl-carousel").owlCarousel(Object.assign({},t,{margin:5,dotsEach:5,responsive:{0:{items:1},768:{items:2},1500:{items:3}}}))}else if(a.includes("media")){e("body.media .owl-carousel").owlCarousel(Object.assign({},t,{items:1,dotsEach:2,video:!0,lazyLoad:!0,center:!0,stageClass:"owl-stage video-enabled",responsive:{415:{videoHeight:263,videoWidth:350},480:{videoHeight:413,videoWidth:550},768:{videoHeight:480,videoWidth:640}}}))}else if(a.includes("images")){const t=e(".pswp")[0],i=e("#gallery").children(),o=function(){let t=[];for(let o=0;o<i.length;o++){let a=e(i[o]),n=a.attr("data-image"),l=a.attr("data-size").split("x"),s={src:n,w:parseInt(l[0]),h:parseInt(l[1])};t.push(s)}return console.log(t),t}(),a=function(e){const i={tapToClose:!0,index:parseInt(e),indexIndicatorSep:" / ",preloaderEl:!0,loadingIndicatorDelay:500,shareButtons:[{id:"download",label:"Download image",url:"{{raw_image_url}}",download:!0}]};new PhotoSwipe(t,PhotoSwipeUI_Default,o,i).init()},n=function(t){t.preventDefault();let i=e(this);const o=i.attr("data-id"),n=i.parent().children();let l;for(let t=0;t<=n.length;t++)e(n[t]).attr("data-id")===o&&(l=t);console.debug("Clicked element with index "+l),void 0!==l&&a(l)};for(let e=0;e<i.length;e++)i[e].onclick=n}e(".hamburger").click(function(){o.classList.toggle("nav-active")})})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
